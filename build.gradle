buildscript {
    repositories {
    	mavenCentral()
        maven {
            name = "Fabric"
            url = "https://maven.fabricmc.net/"
        }
		maven { 
			name = "Jitpack"
			url 'https://jitpack.io/'
		}
	}
	dependencies {
        classpath 'com.github.Chocohead:Fabric-Loom:361cd1c'
	}
}

plugins {
	id 'maven-publish'
}

apply plugin: "fabric-loom"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = project.maven_group
archivesBaseName = project.archives_base_name
version = project.mod_version

repositories {
	mavenLocal()
	maven { 
		name = "Jitpack"
		url "https://jitpack.io/"
	}
	maven {
		name = "HalfOf2"
		url 'https://storage.googleapis.com/devan-maven/'
	}
}

minecraft {
}

dependencies {
    // fabric loader requires log4j, guava, and gson
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.1'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'
	implementation 'com.google.guava:guava:28.0-jre'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

	// mixin and fabric loader need asm 8
	implementation 'org.ow2.asm:asm:8.0'
	implementation 'org.ow2.asm:asm-analysis:8.0'
	implementation 'org.ow2.asm:asm-commons:8.0'
	implementation 'org.ow2.asm:asm-tree:8.0'
	implementation 'org.ow2.asm:asm-util:8.0'

	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	mappings loom.fromCommit("minecraft-cursed-legacy/Plasma", "f900cd3") {spec ->
		spec.version = "b1.7.3-14"
	}

	modImplementation "io.github.minecraft-cursed-legacy:cursed-fabric-loader:${project.loader_version}"

	// API. You technically don't need it, but it's extremely useful for not having to write the same code in every mod.
	modImplementation("io.github.minecraft-cursed-legacy:cursed-legacy-api:${project.api_version}") {
		exclude group: project.maven_group
		exclude module: 'B.1.7.3-CoreLib'
		exclude module: project.archivesBaseName
	}
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier("sources")
	from sourceSets.main.allSource
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			afterEvaluate {
				artifact(remapJar) {
					builtBy remapJar
				}

				artifact(sourcesJar) {
					builtBy remapSourcesJar
				}
			}
		}
	}
}
